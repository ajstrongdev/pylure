#!/usr/bin/python3

import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
from idlelib.percolator import Percolator
from idlelib.colorizer import ColorDelegator
from tkterminal import Terminal
import io
from io import *
import getpass

user = getpass.getuser()

try:
    osconf = open(f'/home/{user}/.config/pylure/os.conf','r')
except FileNotFoundError:
    # Theming for Windows (Custom themes not yet supported)
    color_menu = '#1D1E26'
    color_editor = '#282a36'
    color_text = '#f8f8f2'
    color_comment = '#6272a4'
    color_keyword = '#bd93f9'
    color_string = '#50fa7b'
    color_builtin = '#FF9670'
    color_definition = '#ffb86c'
    color_terminal = '#343746'
else:
    # Theming for Linux
    menuconf = open(f'/home/{user}/.config/pylure/theming/menu.conf','r')
    editorconf = open(f'/home/{user}/.config/pylure/theming/editor.conf','r')
    textconf = open(f'/home/{user}/.config/pylure/theming/text.conf','r')
    commentconf = open(f'/home/{user}/.config/pylure/theming/comment.conf','r')
    keywordconf = open(f'/home/{user}/.config/pylure/theming/keyword.conf','r')
    stringconf = open(f'/home/{user}/.config/pylure/theming/string.conf','r')
    builtinconf = open(f'/home/{user}/.config/pylure/theming/builtin.conf','r')
    definitionconf = open(f'/home/{user}/.config/pylure/theming/definition.conf','r')
    terminalconf = open(f'/home/{user}/.config/pylure/theming/terminal.conf','r')
    
    color_menu = menuconf.readline(7)
    color_editor = editorconf.readline(7)
    color_text = textconf.readline(7)
    color_comment = commentconf.readline(7)
    color_keyword = keywordconf.readline(7)
    color_string = stringconf.readline(7)
    color_builtin = builtinconf.readline(7)
    color_definition = definitionconf.readline(7)
    color_terminal = terminalconf.readline(7)


class Menubar:

    def __init__(self, parent):
        font_specs = ("ubuntu", 14)

        menubar = tk.Menu(parent.master, font=font_specs, background=color_menu, foreground=color_text, borderwidth=0)
        parent.master.config(menu=menubar)

        file_dropdown = tk.Menu(menubar, font=font_specs, tearoff=0)
        file_dropdown.add_command(label="New File",
                                  accelerator="Ctrl+N",
                                  command=parent.new_file)
        file_dropdown.add_command(label="Open File",
                                  accelerator="Ctrl+O",
                                  command=parent.open_file)
        file_dropdown.add_command(label="Save",
                                  accelerator="Ctrl+S",
                                  command=parent.save)
        file_dropdown.add_command(label="Save As",
                                  accelerator="Ctrl+Shift+S",
                                  command=parent.save_as)
        file_dropdown.add_separator()
        file_dropdown.add_command(label="Exit",
                                  command=parent.master.destroy)

        about_dropdown = tk.Menu(menubar, font=font_specs, tearoff=0)
        about_dropdown.add_command(label="Release Notes",
                                   command=self.show_release_notes)
        about_dropdown.add_separator()
        about_dropdown.add_command(label="About",
                                   command=self.show_about_message)

        menubar.add_cascade(label="File", menu=file_dropdown)
        menubar.add_cascade(label="About", menu=about_dropdown)

    def show_about_message(self):
        box_title = "About PyLure"
        box_message = "A python text editor that just works."
        messagebox.showinfo(box_title, box_message)

    def show_release_notes(self):
        box_title = "Release Notes"
        box_message = "Version 1.0 - Payton\nCreated by AJStrong"
        messagebox.showinfo(box_title, box_message)

class Statusbar:

    def __init__(self, parent):

        font_specs = ("ubuntu", 12)
        
        self.status = tk.StringVar()
        self.status.set("PyLure - 1.0 Payton")

        label = tk.Label(parent.textarea, textvariable=self.status, fg=color_text,
                         bg=color_menu, anchor='sw', font=font_specs)
        label.pack(side=tk.BOTTOM, fill=tk.BOTH)
        

    def update_status(self, *args):
        if isinstance(args[0], bool):
            self.status.set("Your File Has Been Saved!")
        else:
            self.status.set("PyLure - 1.0 Payton")

class PyLure:

    def __init__(self, master):
        master.title("Untitled - PyLure")
        master.geometry("1200x700")

        font_specs = ("ubuntu", 18)

        self.master = master
        self.filename = None

        self.textarea = tk.Text(master, font=font_specs, background=color_editor, foreground=color_text, insertbackground=color_text, border=0)
        self.scroll = tk.Scrollbar(master, command=self.textarea.yview)
        self.textarea.configure(yscrollcommand=self.scroll.set)
        self.textarea.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.scroll.pack(side=tk.RIGHT, fill=tk.Y)

        self.menubar = Menubar(self)
        self.statusbar = Statusbar(self)

        self.bind_shortcuts()

        cdg = ColorDelegator()

        cdg.tagdefs['COMMENT'] = {'foreground': color_comment, 'background': color_editor}
        cdg.tagdefs['KEYWORD'] = {'foreground': color_keyword, 'background': color_editor}
        cdg.tagdefs['BUILTIN'] = {'foreground': color_builtin, 'background': color_editor}
        cdg.tagdefs['STRING'] = {'foreground': color_string, 'background': color_editor}
        cdg.tagdefs['DEFINITION'] = {'foreground': color_definition, 'background': color_editor}

        Percolator(self.textarea).insertfilter(cdg)

    def set_window_title(self, name=None):
        if name:
            self.master.title(name + " - PyLure")
        else:
            self.master.title("Untitled - PyLure")

    def new_file(self, *args):
        self.textarea.delete(1.0, tk.END)
        self.filename = None
        self.set_window_title()

    def open_file(self, *args):
        self.filename = filedialog.askopenfilename(
            defaultextension=".py",
            filetypes=[("All Files", "*.*"),
                       ("Text Files", "*.txt"),
                       ("Python Scripts", "*.py"),
                       ("Markdown Documents", "*.md"),
                       ("JavaScript Files", "*.js"),
                       ("HTML Documents", "*.html"),
                       ("CSS Documents", "*.css")])
        if self.filename:
            self.textarea.delete(1.0, tk.END)
            with open(self.filename, "r") as f:
                self.textarea.insert(1.0, f.read())
            self.set_window_title(self.filename)
    
    def save(self, *args):
        if self.filename:
            try:
                textarea_content = self.textarea.get(1.0, tk.END)
                with open(self.filename, "w") as f:
                    f.write(textarea_content)
                self.statusbar.update_status(True)
            except Exception as e:
                print(e)
        else:
            self.save_as()

    def save_as(self, *args):
        try:
            new_file = filedialog.asksaveasfilename(
                initialfile="Untitled.txt",
                defaultextension=".txt",
                filetypes=[("All Files", "*.*"),
                        ("Text Files", "*.txt"),
                        ("Python Scripts", "*.py"),
                        ("Markdown Documents", "*.md"),
                        ("JavaScript Files", "*.js"),
                        ("HTML Documents", "*.html"),
                        ("CSS Documents", "*.css")])
            textarea_content = self.textarea.get(1.0, tk.END)
            with open(new_file, "w") as f:
                f.write(textarea_content)
            self.filename = new_file
            self.set_window_title(self.filename)
            self.statusbar.update_status(True)
        except Exception as e:
            print(e)

    def bind_shortcuts(self):
        self.textarea.bind('<Control-n>', self.new_file)
        self.textarea.bind('<Control-o>', self.open_file)
        self.textarea.bind('<Control-s>', self.save)
        self.textarea.bind('<Control-S>', self.save_as)
        self.textarea.bind('<Key>', self.statusbar.update_status)

if __name__ == "__main__":
    master = tk.Tk()
    pl = PyLure(master)
    terminal = Terminal(background=color_terminal, foreground=color_text, width="30")
    terminal.shell = True
    terminal.pack(side=tk.RIGHT, fill=tk.BOTH)
    master.mainloop()